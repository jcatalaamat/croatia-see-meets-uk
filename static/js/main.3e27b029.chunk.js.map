{"version":3,"sources":["components/Page.jsx","App.js","serviceWorker.js","index.js"],"names":["Page","react_default","a","createElement","className","id","type","href","target","App","components_Page","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJA8GeA,QA5GF,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACNJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,aACZL,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,MAAIE,GAAG,QACLJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAIN,EAAAC,EAAAC,cAAA,mBACZF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAIN,EAAAC,EAAAC,cAAA,oBACZF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAIN,EAAAC,EAAAC,cAAA,mBACZF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAIN,EAAAC,EAAAC,cAAA,sBACZF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,0BAA0BC,OAAO,UAASP,EAAAC,EAAAC,cAAA,8BAKxDF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,wCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAAhB,sDAMJH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,WAEG,IACDH,EAAAC,EAAAC,cAAA,8EAGG,KANL,kFAYFF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,kVASFH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,8PAYNH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAAhB,sBAMNH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,oHAMFF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,wHAONF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,UAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,cC7FSK,SANH,kBACVR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACO,EAAD,SCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e27b029.chunk.js","sourcesContent":["import React from 'react';\n\nconst Page = () => (\n  <div className=\"App-container\">\n    <div className=\"title-section\">\n      <div className=\"header-menu\">\n        <div id=\"menuToggle\">\n          <input type=\"checkbox\" />\n          <span />\n          <span />\n          <span />\n          <ul id=\"menu\">\n            <a href=\"#\"><li>Home</li></a>\n            <a href=\"#\"><li>About</li></a>\n            <a href=\"#\"><li>Info</li></a>\n            <a href=\"#\"><li>Contact</li></a>\n            <a href=\"https://erikterwan.com/\" target=\"_blank\"><li>Show me more</li></a>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"titles\">\n        <h4>TECH FUTURES LONDON 2019</h4>\n        <h1>Croatia and SEE* meets the UK</h1>\n        <h6>*SEE: Southeastern Europe</h6>\n      </div>\n      <div className=\"content\">\n        <div className=\"contrast-header__container\">\n          <h5>\n            <span className=\"contrast-header__text\">\n              London, 28/29 March 2019\n              at TechSpace Shoreditch\n            </span>\n          </h5>\n        </div>\n        <p>\n          <span className=\"p-contrast\">\n            A unique\n            {' '}\n            <b>\n            business and professional education,\n            pitching and networking event\n              {' '}\n            </b>\n            in the City's tech-fuelled\n            ‘Silicon Roundabout’ area of Shoreditch.\n          </span>\n        </p>\n        <p>\n          <span className=\"p-contrast\">\n            The event is intended for Croatian, SEE and British\n            professional investors, business delegates and start-ups\n            looking to advance their business and knowledge of the\n            tech-family of innovations (fintech, regtech, healthtech,\n            govtech), blockchain and gain insights on the digital\n            futures and opportunities in European and global markets.\n          </span>\n        </p>\n        <p>\n          <span className=\"p-contrast\">\n            The event is offered as an all-inclusive package where\n            the price includes participation in all the business, social\n            and networking events, bed-and-breakfast\n            accommodation at the Nobu Shoreditch hotel as well as\n            food and drinks throughout the days.\n          </span>\n        </p>\n      </div>\n\n    </div>\n\n    <div className=\"about-section\">\n      <div className=\"section--white\">\n        <div className=\"content\">\n          <div className=\"contrast-header__container\">\n            <h2>\n              <span className=\"contrast-header__text\">\n              About the event\n              </span>\n            </h2>\n          </div>\n        </div>\n        <div className=\"content\">\n          <p>\n            <b>\n          The British Croatian Chamber of Commerce (BCCC)\n          is offering our latest all-in TECH FUTURES\n          LONDON 2019\n            </b>\n          </p>\n          <p>\n            <b>\n          The Event agenda is designed to mimic, at a high\n          level, the typical 3-stage lifecycle of a tech start-up\n            </b>\n          </p>\n        </div>\n      </div>\n      <div className=\"separator\" />\n      <div className=\"section--white\">\n        blabla\n      </div>\n      <div className=\"separator\" />\n      <div className=\"section--white\">\n        blabla\n      </div>\n    </div>\n  </div>\n);\n\nexport default Page;\n","import React from 'react';\nimport Page from './components/Page';\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <Page />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}